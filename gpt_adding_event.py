import datetime
import json


async def parse_gpt_response(response):
    """
    –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç GPT –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏—è.
    """
    try:
        parsed_data = json.loads(response)  # GPT –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å JSON
        required_keys = ["summary", "start", "end"]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π
        for key in required_keys:
            if key not in parsed_data or not parsed_data[key]:
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {key}")

        return parsed_data
    except json.JSONDecodeError as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ GPT: {e}")


def format_datetime(datetime_str):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º –≤ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç.
    """
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É ISO 8601 –≤ –æ–±—ä–µ–∫—Ç datetime
        dt = datetime.datetime.fromisoformat(datetime_str)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≤–∏–¥–µ "–î–î –ú–µ—Å—è—Ü –ì–ì–ì–ì, –ß–ß:–ú–ú"
        return dt.strftime("%d %B %Y –≥–æ–¥–∞, %H:%M")
    except ValueError:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"


async def generate_user_message(event_data):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è.
    """
    summary = event_data.get("summary", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    start = event_data.get("start", {}).get("dateTime", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    end = event_data.get("end", {}).get("dateTime", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

    start_formatted = format_datetime(start) if start != "–ù–µ —É–∫–∞–∑–∞–Ω–æ" else start
    end_formatted = format_datetime(end) if end != "–ù–µ —É–∫–∞–∑–∞–Ω–æ" else end

    if start == "–ù–µ —É–∫–∞–∑–∞–Ω–æ" or end == "–ù–µ —É–∫–∞–∑–∞–Ω–æ":
        return f"–î–ª—è —Å–æ–±—ã—Ç–∏—è '{summary}' –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Ç–æ—á–Ω–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è."

    return (
        f"üéâ –°–æ–±—ã—Ç–∏–µ: '{summary}'\n"
        f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: —Å {start_formatted} –¥–æ {end_formatted}.\n\n"
        f"üí° –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏."
    )


async def handle_gpt_response(response, state, user_timezone):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç GPT, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å–æ–±—ã—Ç–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –æ—Ç GPT
        event_data_from_gpt = await parse_gpt_response(response)

        # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        event_data_from_gpt["start"]["timeZone"] = user_timezone
        event_data_from_gpt["end"]["timeZone"] = user_timezone

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è
        start_datetime = datetime.datetime.fromisoformat(
            event_data_from_gpt["start"]["dateTime"]
        )
        if start_datetime < datetime.datetime.now():
            return f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –Ω–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è: {format_datetime(str(start_datetime))}."

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(event_data=event_data_from_gpt)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_message = await generate_user_message(event_data_from_gpt)
        print("–∏—Ç–æ–≥–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å", event_data_from_gpt)
        return user_message
    except ValueError as e:
        return f"–û—à–∏–±–∫–∞: {e}"
